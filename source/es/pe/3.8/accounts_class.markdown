---
layout: default
title: "PE 3.8 » Accounts Module » The pe_accounts Class"
subtitle: "The pe_accounts Class"
canonical: "/pe/latest/accounts_class.html"
---

Esta clase es parte de `pe_accounts`, un módulo de Puppet pre-instalado incluído en Puppet Enterprise.

> ![windows-only](./images/windows-logo-small.jpg) **NOTE:**  `pe_accounts`  aún no esta soportada en nodos Windows.

La clase `pe_accounts` puede hacer cualquiera o todas las siguientes:

- Crear y administrar un set de recursos de tipo `pe_accounts::user`
- Crear y administrar un set de recursos tipo `group` compartido
- Mantener un par de reglas en el archivo `sudoers` para dar privilegios a los grupos `sudo` y `sudonopw`

Esta clase esta diseñada para casos en donde tu información de cuenta se **mantiene de forma separada** de tus manifiestos de Puppet. Es decir, que se da alguno de los siguientes casos:

* La información esta siendo obtenida desde un directorio no-Puppet o CMDB, probablemente con una función a medida.
* La información esta siendo mantenida manualmente por un usuario que no escribe código de Puppet.
* La información esta siendo generada por un proceso externo (out-of-band).

Si la información de la cuenta de tu sitio sera mantenida manualmente por un administrador de sistema que tiene la habilidad de escribir código Puppet, es más practico mantenerla como un grupo de recursos `pe_accounts::user` y `group` sin importar que utilices la clase `pe_accounts` para mantener las reglas en el archivo `sudoers`.

Para administrar usuarios y grupos con la clase `pe_accounts`m **debes** preparar un repositorio de datos y configurar la clase para ese repositorio cuando sea declarada.

> **Nota:** Esta clase esta asignada al grupo `default` en la consola sin parametros, para prevenir que sea redeclarada sin ninguna configuración. Para utilizar esta clase debes:

* Desasignarla del grupo `default` en la consola
* Crear un modulo alrededor de la clase declarándola con los parametros necesarios
* Reasignar tu nuevo modulo a cualquier nodo que asi lo requiera

Ejemplo
-----

Para utilizar archivos YAML como repositorio de datos:

~~~ ruby
    class {'pe_accounts':
      data_store => yaml,
    }
~~~

Para utilizar una clase de Puppet como repositorio de datos (y administrar reglas en el archivo `sudoers`):

~~~ ruby
    class {'pe_accounts':
      data_store     => namespace,
      data_namespace => 'site::pe_accounts::data',
      manage_sudoers => true,
    }
~~~

Para administrar las reglas en el archivo `sudoers` sin administrar usuarios o grupos:

~~~ ruby
    class {'pe_accounts':
      manage_users   => false,
      manage_groups  => false,
      manage_sudoers => true,
    }
~~~

Repositorios de Datos
-----

La información de cuentas puede ser obtenida de una de dos fuentes: **una clase de Puppet que declara tres variables,*** o **un set de tres archivos [YAML](http://yaml.org/)** almacenados en `/etc/puppetlabs/puppet/data`.

### Utilizando una clase de Puppet como Repositorio de Datos

Esta opción es util si te es posible generar o importar tus datos de usuario con una [función a medida](/guides/custom_functions.html), que puede estar obteniendo información desde un directorio LDAP o alguna otra fuente de datos.

Th Puppet class containing the data **must have a name ending in `::data`.** (We recommend `site::pe_accounts::data`.) This class must declare the following variables:

- `$users_hash` should be a hash in which each key is the **title of a `pe_accounts::user` resource** and each value is **a hash containing that resource's attributes and values.**
- `$groups_hash` should be a hash in which each key is the **title of a group** and each value is **a hash containing that resource's attributes and values.**

[See below][dataformat] for examples of the data formats used in these variables.

When declaring the `pe_accounts` class to use data in a Puppet class, use the following attributes:

    data_store     => namespace,
    data_namespace => {name of class},

### Using YAML Files as a Data Store

This option is most useful if your user data is being generated by an out-of-band process or is being maintained by a user who does not write Puppet manifests.

When storing data in YAML, the following valid [YAML](http://yaml.org/) files must exist in `/etc/puppetlabs/puppet/data`:

- `pe_accounts_users_hash.yaml`, which should contain an anonymous hash in which each key is the **title of a `pe_accounts::user` resource** and each value is **a hash containing that resource's attributes and values.**
- `pe_accounts_groups_hash.yaml`, which should contain an anonymous hash in which each key is the **title of a group** and each value is **a hash containing that resource's attributes and values.**

[See below][dataformat] for examples of the data formats used in these variables.

When declaring the `pe_accounts` class to use data in YAML files, use the following attribute:

    data_store => yaml,

### Data Formats

[dataformat]: #data-formats

This class uses three hashes of data to construct the `pe_accounts::user` and `group` resources it manages.

#### The Users Hash

The **users hash** represents a set of `pe_accounts::user` resources. Each key should be the **title of a `pe_accounts::user` resource,** and each value should be **another hash containing that resource's attributes and values.**

##### Puppet Example

~~~ ruby
    $users_hash = {
      sysop => {
        locked  => false,
        comment => 'System Operator',
        uid     => '700',
        gid     => '700',
        groups  => ['admin', 'sudonopw'],
        sshkeys => ['ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAwLBhQefRiXHSbVNZYKu2o8VWJjZJ/B4LqICXuxhiiNSCmL8j+5zE/VLPIMeDqNQt8LjKJVOQGZtNutW4OhsLKxdgjzlYnfTsQHp8+JMAOFE3BD1spVnGdmJ33JdMsQ/fjrVMacaHyHK0jW4pHDeUU3kRgaGHtX4TnC0A175BNTH9yJliDvddRzdKR4WtokNzqJU3VPtHaGmJfXEYSfun/wFfc46+hP6u0WcSS7jZ2WElBZ7gNO4u2Z+eJjFWS9rjQ/gNE8HHlvmN0IUuvdpKdBlJjzSiKZR+r/Bo9ujQmGY4cmvlvgmcdajM/X1TqP6p3OuouAk5QSPUlDRV91oEHw== sysop+moduledevkey@puppetlabs.com'],
      },
      villain => {
        locked  => true,
        comment => 'Test Locked Account',
        uid     => '701',
        gid     => '701',
        groups  => ['admin', 'sudonopw'],
        sshkeys => ['ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAwLBhQefRiXHSbVNZYKu2o8VWJjZJ/B4LqICXuxhiiNSCmL8j+5zE/VLPIMeDqNQt8LjKJVOQGZtNutW4OhsLKxdgjzlYnfTsQHp8+JMAOFE3BD1spVnGdmJ33JdMsQ/fjrVMacaHyHK0jW4pHDeUU3kRgaGHtX4TnC0A175BNTH9yJliDvddRzdKR4WtokNzqJU3VPtHaGmJfXEYSfun/wFfc46+hP6u0WcSS7jZ2WElBZ7gNO4u2Z+eJjFWS9rjQ/gNE8HHlvmN0IUuvdpKdBlJjzSiKZR+r/Bo9ujQmGY4cmvlvgmcdajM/X1TqP6p3OuouAk5QSPUlDRV91oEHw== villain+moduledevkey@puppetlabs.com'],
      },
    }
~~~

##### YAML Example

    ---
    sysop:
      locked: false
      comment: System Operator
      uid: '700'
      gid: '700'
      groups:
      - admin
      - sudonopw
      sshkeys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAwLBhQefRiXHSbVNZYKu2o8VWJjZJ/B4LqICXuxhiiNSCmL8j+5zE/VLPIMeDqNQt8LjKJVOQGZtNutW4OhsLKxdgjzlYnfTsQHp8+JMAOFE3BD1spVnGdmJ33JdMsQ/fjrVMacaHyHK0jW4pHDeUU3kRgaGHtX4TnC0A175BNTH9yJliDvddRzdKR4WtokNzqJU3VPtHaGmJfXEYSfun/wFfc46+hP6u0WcSS7jZ2WElBZ7gNO4u2Z+eJjFWS9rjQ/gNE8HHlvmN0IUuvdpKdBlJjzSiKZR+r/Bo9ujQmGY4cmvlvgmcdajM/X1TqP6p3OuouAk5QSPUlDRV91oEHw== sysop+moduledevkey@puppetlabs.com
    villain:
      locked: true
      comment: Test Locked Account
      uid: '701'
      gid: '701'
      groups:
      - admin
      - sudonopw
      sshkeys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAwLBhQefRiXHSbVNZYKu2o8VWJjZJ/B4LqICXuxhiiNSCmL8j+5zE/VLPIMeDqNQt8LjKJVOQGZtNutW4OhsLKxdgjzlYnfTsQHp8+JMAOFE3BD1spVnGdmJ33JdMsQ/fjrVMacaHyHK0jW4pHDeUU3kRgaGHtX4TnC0A175BNTH9yJliDvddRzdKR4WtokNzqJU3VPtHaGmJfXEYSfun/wFfc46+hP6u0WcSS7jZ2WElBZ7gNO4u2Z+eJjFWS9rjQ/gNE8HHlvmN0IUuvdpKdBlJjzSiKZR+r/Bo9ujQmGY4cmvlvgmcdajM/X1TqP6p3OuouAk5QSPUlDRV91oEHw== villain+moduledevkey@puppetlabs.com

#### The Groups Hash

The **groups hash** represents a set of shared `group` resources. Each key should be the **title of a `group` resource,** and each value should be **another hash containing that resource's attributes and values.**

##### Puppet Example

~~~ ruby
    $groups_hash = {
      developer => {
        gid    => 3003,
        ensure => present,
      },
      sudonopw => {
        gid    => 3002,
        ensure => present,
      },
      sudo     => {
        gid    => 3001,
        ensure => present,
      },
      admin    => {
        gid    => 3000,
        ensure => present,
      },
    }
~~~

##### YAML Example

    ---
    developer:
     gid: "3003"
     ensure: "present"
    sudonopw:
     gid: "3002"
     ensure: "present"
    sudo:
     gid: "3001"
     ensure: "present"
    admin:
     gid: "3000"
     ensure: "present"

Parameters
-----

### `manage_groups`

Specifies whether or not to manage a set of shared groups, which can be used by all `pe_accounts::user` resources. If true, your data store must define these groups in the `$groups_hash` variable or the `pe_accounts_groups_hash.yaml` file. Allowed values are `true` and `false`; defaults to `true`.

### `manage_users`

Specifies whether or not to manage a set of `pe_accounts::user` resources. If true, your data store must define these users in the `$users_hash` variable or the `pe_accounts_users_hash.yaml` file. Allowed values are `true` and `false`; defaults to `true`.

### `manage_sudoers`

Specifies whether or not to add sudo rules to the node's `sudoers` file. If true, the class will add <!-- TK why the % sign --> `%sudo` and `%sudonopw` groups to the `sudoers` file and give them full sudo and passwordless sudo privileges respectively. You will need to make sure that the `sudo` and `sudonopw` groups exist in the groups hash, and that your chosen users have those groups in their `groups` arrays. Managing `sudoers` is not supported on Solaris.

Allowed values are `true` and `false`; defaults to `false`.

### `data_store`

Specifies the data store to use for accounts and groups.

When set to `namespace`, data will be read from the Puppet class specified in the `data_namespace` parameter.  When set to `yaml`, data will be read from specially-named YAML files in the `/etc/puppetlabs/puppet/data` directory. (If you have changed your `$confdir`, it will look in `$confdir/data`.) Example YAML files are provided in the `ext/data/` directory of this module.

Allowed values are `yaml` and `namespace`; defaults to `namespace`.

### `data_namespace`

Specifies the Puppet namespace from which to read data. This must be the name of a Puppet class, and must end with `::data` (we recommend using `site::pe_accounts::data`); the class will automatically be declared by the `pe_accounts` class. The class cannot have any parameters, and must declare variables named:

- `$users_hash`
- `$groups_hash`

See the `pe_accounts::data` class included in this module (in `manifests/data.pp`) for an example; see [the data formats section](#data-formats) for information on each hash's data structure.

Defaults to `pe_accounts::data`.

### `sudoers_path`

Specifies the path to the `sudoers` file on this system. Defaults to `/etc/sudoers`.



* * *

- [Next: Maintenance: Maintaining the Console & Databases](./maintain_console-db.html)
